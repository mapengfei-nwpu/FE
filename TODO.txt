# 1
2019/11/18 10:32
测试两个fenics自带的网格生成器
BoxMesh::build_hex()
RectangleMesh::build_quad()
在并行时检测下面两个是否相同。
1. cell.global_index()
2. cell.center()
最后在代码中保留检测代码。
# 2
2019/11/18 22:52
测试delta插值函数
1. 将hex.cpp中的两个类分成两个.h文件。
2. 测试这个两个类是否能用并完善注释。
3. 写一个提取自由度坐标的函数，并将他并行分布。
4. 画出比如1+x+y函数的插值。
5. 前面完成的是流体到固体的插值，现在考虑固体到流体。
# 3
2019/11/20 1:09
2号的下列没有完成。
3. 写一个提取自由度坐标的函数，并将他并行分布。
5. 前面完成的是流体到固体的插值，现在考虑固体到流体。

周三和周四两天的任务：
1. 新建一个vector代替function中的vector。
2. 将函数空间改成2阶的。
3. 将标量空间改成向量空间。

2019/11/21 21：45
固体到流体插值的并行效率：
（固体和流体都有1000*1000个单元）
npuheart9@fenics:~/FE$ time mpirun -np 1 ./demo_poisson

real    0m14.199s
user    0m13.112s
sys     0m0.807s
npuheart9@fenics:~/FE$ time mpirun -np 2 ./demo_poisson

real    0m11.326s
user    0m20.584s
sys     0m1.284s
npuheart9@fenics:~/FE$ time mpirun -np 4 ./demo_poisson

real    0m6.855s
user    0m23.895s
sys     0m1.733s

npuheart9@fenics:~/FE$ time mpirun -np 8 ./demo_poisson

real    0m5.712s
user    0m38.481s
sys     0m3.334s


2019/11/24 00：21
# 4 初步在fenics的基础上实现了浸没边界法的并行程序，并且得到了正确结果。

1. 对三角形单元实行高斯积分
2. 实现弹性球示例
3. 逐步向三维转换