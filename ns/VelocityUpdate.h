// This code conforms with the UFC specification version 2018.1.0
// and was automatically generated by FFC version 2019.1.0.post0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
//
// This code was generated with the following parameters:
//

//  add_tabulate_tensor_timing:     False
//  convert_exceptions_to_warnings: False
//  cpp_optimize:                   True
//  cpp_optimize_flags:             '-O2'
//  epsilon:                        1e-14
//  error_control:                  False
//  external_include_dirs:          ''
//  external_includes:              ''
//  external_libraries:             ''
//  external_library_dirs:          ''
//  form_postfix:                   True
//  format:                         'dolfin'
//  generate_dummy_tabulate_tensor: False
//  max_signature_length:           0
//  optimize:                       True
//  precision:                      None
//  quadrature_degree:              None
//  quadrature_rule:                None
//  representation:                 'auto'
//  split:                          False

#ifndef __VELOCITYUPDATE_H
#define __VELOCITYUPDATE_H
#include <algorithm>
#include <cmath>
#include <iostream>
#include <stdexcept>
#include <ufc.h>

class velocityupdate_finite_element_0: public ufc::finite_element
{
public:

  velocityupdate_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  ~velocityupdate_finite_element_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Q', quadrilateral, 2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::quadrilateral;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 9;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 2;
  }

  const char * family() const final override
  {
    return "Q";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    throw std::runtime_error("evaluate_reference_basis: Function is not supported/implemented.");
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    throw std::runtime_error("evaluate_reference_basis_derivatives: Function is not supported/implemented.");
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    throw std::runtime_error("transform_reference_basis_derivatives: Function is not supported/implemented.");
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    throw std::runtime_error("evaluate_basis: Function is not supported/implemented.");
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    throw std::runtime_error("evaluate_basis_all: Function is not supported/implemented.");
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::cerr << "*** FFC warning: " << "evaluate_basis_derivatives: Function is not supported/implemented." << std::endl;
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    std::cerr << "*** FFC warning: " << "evaluate_basis_derivatives_all: Function is not supported/implemented." << std::endl;
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[6];
            y[1] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[7];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 7:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[6];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[7];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 8:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[6];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[7];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[6];
    y[1] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[7];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[6];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[7];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[6];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[7];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[3];
    vertex_values[3] = dof_values[4];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 2 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    dof_coordinates[2 * 3] = coordinate_dofs[4];
    dof_coordinates[2 * 3 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 4] = coordinate_dofs[6];
    dof_coordinates[2 * 4 + 1] = coordinate_dofs[7];
    dof_coordinates[2 * 5] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[6];
    dof_coordinates[2 * 5 + 1] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[7];
    dof_coordinates[2 * 6] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 6 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 7] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[6];
    dof_coordinates[2 * 7 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[7];
    dof_coordinates[2 * 8] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[6];
    dof_coordinates[2 * 8 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[7];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[18] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.5, 1.0, 0.0, 1.0, 1.0, 1.0, 0.5, 0.5, 0.0, 0.5, 1.0, 0.5, 0.5 };
    std::copy_n(dof_X, 18, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new velocityupdate_finite_element_0();
  }

};


class velocityupdate_finite_element_1: public ufc::finite_element
{
public:

  velocityupdate_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  ~velocityupdate_finite_element_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Q', quadrilateral, 2), dim=2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::quadrilateral;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 18;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 2;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 2;
  }

  std::size_t degree() const final override
  {
    return 2;
  }

  const char * family() const final override
  {
    return "Q";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    throw std::runtime_error("evaluate_reference_basis: Function is not supported/implemented.");
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    throw std::runtime_error("evaluate_reference_basis_derivatives: Function is not supported/implemented.");
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    throw std::runtime_error("transform_reference_basis_derivatives: Function is not supported/implemented.");
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    throw std::runtime_error("evaluate_basis: Function is not supported/implemented.");
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    throw std::runtime_error("evaluate_basis_all: Function is not supported/implemented.");
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::cerr << "*** FFC warning: " << "evaluate_basis_derivatives: Function is not supported/implemented." << std::endl;
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    std::cerr << "*** FFC warning: " << "evaluate_basis_derivatives_all: Function is not supported/implemented." << std::endl;
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[6];
            y[1] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[7];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 7:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[6];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[7];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 8:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[6];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[7];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 9:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 10:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 11:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 12:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 13:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 14:
        {
            y[0] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[6];
            y[1] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[7];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 15:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 16:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[6];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[7];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 17:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[6];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[7];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[6];
    y[1] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[7];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[6];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[7];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[6];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[7];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[9] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[12] = vals[1];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    f.evaluate(vals, y, c);
    values[13] = vals[1];
    y[0] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[6];
    y[1] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[7];
    f.evaluate(vals, y, c);
    values[14] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[15] = vals[1];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[6];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[7];
    f.evaluate(vals, y, c);
    values[16] = vals[1];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[6];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[7];
    f.evaluate(vals, y, c);
    values[17] = vals[1];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[3];
    vertex_values[6] = dof_values[4];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[9];
    vertex_values[3] = dof_values[10];
    vertex_values[5] = dof_values[12];
    vertex_values[7] = dof_values[13];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 2 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    dof_coordinates[2 * 3] = coordinate_dofs[4];
    dof_coordinates[2 * 3 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 4] = coordinate_dofs[6];
    dof_coordinates[2 * 4 + 1] = coordinate_dofs[7];
    dof_coordinates[2 * 5] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[6];
    dof_coordinates[2 * 5 + 1] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[7];
    dof_coordinates[2 * 6] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 6 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 7] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[6];
    dof_coordinates[2 * 7 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[7];
    dof_coordinates[2 * 8] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[6];
    dof_coordinates[2 * 8 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[7];
    dof_coordinates[2 * 9] = coordinate_dofs[0];
    dof_coordinates[2 * 9 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 10] = coordinate_dofs[2];
    dof_coordinates[2 * 10 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 11] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 11 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    dof_coordinates[2 * 12] = coordinate_dofs[4];
    dof_coordinates[2 * 12 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 13] = coordinate_dofs[6];
    dof_coordinates[2 * 13 + 1] = coordinate_dofs[7];
    dof_coordinates[2 * 14] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[6];
    dof_coordinates[2 * 14 + 1] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[7];
    dof_coordinates[2 * 15] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 15 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 16] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[6];
    dof_coordinates[2 * 16 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[7];
    dof_coordinates[2 * 17] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[6];
    dof_coordinates[2 * 17 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[7];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[36] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.5, 1.0, 0.0, 1.0, 1.0, 1.0, 0.5, 0.5, 0.0, 0.5, 1.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0, 0.0, 0.5, 1.0, 0.0, 1.0, 1.0, 1.0, 0.5, 0.5, 0.0, 0.5, 1.0, 0.5, 0.5 };
    std::copy_n(dof_X, 36, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 2;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new velocityupdate_finite_element_0();
    case 1:
        return new velocityupdate_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new velocityupdate_finite_element_1();
  }

};


class velocityupdate_finite_element_2: public ufc::finite_element
{
public:

  velocityupdate_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  ~velocityupdate_finite_element_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Q', quadrilateral, 1)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::quadrilateral;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 4;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Q";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    throw std::runtime_error("evaluate_reference_basis: Function is not supported/implemented.");
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    throw std::runtime_error("evaluate_reference_basis_derivatives: Function is not supported/implemented.");
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    throw std::runtime_error("transform_reference_basis_derivatives: Function is not supported/implemented.");
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    throw std::runtime_error("evaluate_basis: Function is not supported/implemented.");
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    throw std::runtime_error("evaluate_basis_all: Function is not supported/implemented.");
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::cerr << "*** FFC warning: " << "evaluate_basis_derivatives: Function is not supported/implemented." << std::endl;
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    std::cerr << "*** FFC warning: " << "evaluate_basis_derivatives_all: Function is not supported/implemented." << std::endl;
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = coordinate_dofs[6];
    dof_coordinates[2 * 3 + 1] = coordinate_dofs[7];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[8] = { 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0 };
    std::copy_n(dof_X, 8, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new velocityupdate_finite_element_2();
  }

};


class velocityupdate_finite_element_3: public ufc::finite_element
{
public:

  velocityupdate_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  ~velocityupdate_finite_element_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Q', quadrilateral, 1), dim=2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::quadrilateral;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 8;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 2;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 2;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Q";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    throw std::runtime_error("evaluate_reference_basis: Function is not supported/implemented.");
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    throw std::runtime_error("evaluate_reference_basis_derivatives: Function is not supported/implemented.");
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    throw std::runtime_error("transform_reference_basis_derivatives: Function is not supported/implemented.");
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    throw std::runtime_error("evaluate_basis: Function is not supported/implemented.");
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    throw std::runtime_error("evaluate_basis_all: Function is not supported/implemented.");
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::cerr << "*** FFC warning: " << "evaluate_basis_derivatives: Function is not supported/implemented." << std::endl;
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    std::cerr << "*** FFC warning: " << "evaluate_basis_derivatives_all: Function is not supported/implemented." << std::endl;
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 5:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 6:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 7:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    vertex_values[6] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[3] = dof_values[5];
    vertex_values[5] = dof_values[6];
    vertex_values[7] = dof_values[7];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = coordinate_dofs[6];
    dof_coordinates[2 * 3 + 1] = coordinate_dofs[7];
    dof_coordinates[2 * 4] = coordinate_dofs[0];
    dof_coordinates[2 * 4 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 5] = coordinate_dofs[2];
    dof_coordinates[2 * 5 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 6] = coordinate_dofs[4];
    dof_coordinates[2 * 6 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 7] = coordinate_dofs[6];
    dof_coordinates[2 * 7 + 1] = coordinate_dofs[7];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[16] = { 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0 };
    std::copy_n(dof_X, 16, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 2;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new velocityupdate_finite_element_2();
    case 1:
        return new velocityupdate_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new velocityupdate_finite_element_3();
  }

};


class velocityupdate_finite_element_4: public ufc::finite_element
{
public:

  velocityupdate_finite_element_4() : ufc::finite_element()
  {
    // Do nothing
  }

  ~velocityupdate_finite_element_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Real', quadrilateral, 0)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::quadrilateral;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 1;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 0;
  }

  const char * family() const final override
  {
    return "Real";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    throw std::runtime_error("evaluate_reference_basis: Function is not supported/implemented.");
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    throw std::runtime_error("evaluate_reference_basis_derivatives: Function is not supported/implemented.");
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    throw std::runtime_error("transform_reference_basis_derivatives: Function is not supported/implemented.");
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    throw std::runtime_error("evaluate_basis: Function is not supported/implemented.");
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    throw std::runtime_error("evaluate_basis_all: Function is not supported/implemented.");
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::cerr << "*** FFC warning: " << "evaluate_basis_derivatives: Function is not supported/implemented." << std::endl;
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    std::cerr << "*** FFC warning: " << "evaluate_basis_derivatives_all: Function is not supported/implemented." << std::endl;
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[6];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[7];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[6];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[7];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
    vertex_values[3] = dof_values[0];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[6];
    dof_coordinates[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[7];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[2] = { 0.5, 0.5 };
    std::copy_n(dof_X, 2, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new velocityupdate_finite_element_4();
  }

};


class velocityupdate_dofmap_0: public ufc::dofmap
{
public:

  velocityupdate_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  ~velocityupdate_dofmap_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Q', quadrilateral, 2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, true, true };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0] + num_global_entities[1] + num_global_entities[2];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 9;
  }

  std::size_t num_element_dofs() const final override
  {
    return 9;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 3;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 1, 1 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 3, 9 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[3] = offset + entity_indices[0][2];
    dofs[4] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[2] = offset + entity_indices[1][0];
    dofs[5] = offset + entity_indices[1][1];
    dofs[6] = offset + entity_indices[1][2];
    dofs[7] = offset + entity_indices[1][3];
    offset += num_global_entities[1];
    dofs[8] = offset + entity_indices[2][0];
    offset += num_global_entities[2];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        break;
    case 1:
        dofs[0] = 3;
        dofs[1] = 4;
        dofs[2] = 5;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 3;
        dofs[2] = 6;
        break;
    case 3:
        dofs[0] = 1;
        dofs[1] = 4;
        dofs[2] = 7;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 3;
            break;
        case 3:
            dofs[0] = 4;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            break;
        case 1:
            dofs[0] = 5;
            break;
        case 2:
            dofs[0] = 6;
            break;
        case 3:
            dofs[0] = 7;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 8;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 3;
            break;
        case 3:
            dofs[0] = 4;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        case 1:
            dofs[0] = 3;
            dofs[1] = 4;
            dofs[2] = 5;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 6;
            break;
        case 3:
            dofs[0] = 1;
            dofs[1] = 4;
            dofs[2] = 7;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new velocityupdate_dofmap_0();
  }

};


class velocityupdate_dofmap_1: public ufc::dofmap
{
public:

  velocityupdate_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  ~velocityupdate_dofmap_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Q', quadrilateral, 2), dim=2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, true, true };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 2 * num_global_entities[0] + 2 * num_global_entities[1] + 2 * num_global_entities[2];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 18;
  }

  std::size_t num_element_dofs() const final override
  {
    return 18;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 6;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 2, 2 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 6, 18 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[3] = offset + entity_indices[0][2];
    dofs[4] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[2] = offset + entity_indices[1][0];
    dofs[5] = offset + entity_indices[1][1];
    dofs[6] = offset + entity_indices[1][2];
    dofs[7] = offset + entity_indices[1][3];
    offset += num_global_entities[1];
    dofs[8] = offset + entity_indices[2][0];
    offset += num_global_entities[2];
    dofs[9] = offset + entity_indices[0][0];
    dofs[10] = offset + entity_indices[0][1];
    dofs[12] = offset + entity_indices[0][2];
    dofs[13] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[11] = offset + entity_indices[1][0];
    dofs[14] = offset + entity_indices[1][1];
    dofs[15] = offset + entity_indices[1][2];
    dofs[16] = offset + entity_indices[1][3];
    offset += num_global_entities[1];
    dofs[17] = offset + entity_indices[2][0];
    offset += num_global_entities[2];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 9;
        dofs[4] = 10;
        dofs[5] = 11;
        break;
    case 1:
        dofs[0] = 3;
        dofs[1] = 4;
        dofs[2] = 5;
        dofs[3] = 12;
        dofs[4] = 13;
        dofs[5] = 14;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 3;
        dofs[2] = 6;
        dofs[3] = 9;
        dofs[4] = 12;
        dofs[5] = 15;
        break;
    case 3:
        dofs[0] = 1;
        dofs[1] = 4;
        dofs[2] = 7;
        dofs[3] = 10;
        dofs[4] = 13;
        dofs[5] = 16;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 9;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 10;
            break;
        case 2:
            dofs[0] = 3;
            dofs[1] = 12;
            break;
        case 3:
            dofs[0] = 4;
            dofs[1] = 13;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 11;
            break;
        case 1:
            dofs[0] = 5;
            dofs[1] = 14;
            break;
        case 2:
            dofs[0] = 6;
            dofs[1] = 15;
            break;
        case 3:
            dofs[0] = 7;
            dofs[1] = 16;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 8;
            dofs[1] = 17;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 9;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 10;
            break;
        case 2:
            dofs[0] = 3;
            dofs[1] = 12;
            break;
        case 3:
            dofs[0] = 4;
            dofs[1] = 13;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 9;
            dofs[4] = 10;
            dofs[5] = 11;
            break;
        case 1:
            dofs[0] = 3;
            dofs[1] = 4;
            dofs[2] = 5;
            dofs[3] = 12;
            dofs[4] = 13;
            dofs[5] = 14;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 6;
            dofs[3] = 9;
            dofs[4] = 12;
            dofs[5] = 15;
            break;
        case 3:
            dofs[0] = 1;
            dofs[1] = 4;
            dofs[2] = 7;
            dofs[3] = 10;
            dofs[4] = 13;
            dofs[5] = 16;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            dofs[15] = 15;
            dofs[16] = 16;
            dofs[17] = 17;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 2;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new velocityupdate_dofmap_0();
    case 1:
        return new velocityupdate_dofmap_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new velocityupdate_dofmap_1();
  }

};


class velocityupdate_dofmap_2: public ufc::dofmap
{
public:

  velocityupdate_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  ~velocityupdate_dofmap_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Q', quadrilateral, 1)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, false, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 4;
  }

  std::size_t num_element_dofs() const final override
  {
    return 4;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 2;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 0, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 2, 4 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
    dofs[3] = entity_indices[0][3];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 0;
        dofs[1] = 1;
        break;
    case 1:
        dofs[0] = 2;
        dofs[1] = 3;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 2;
        break;
    case 3:
        dofs[0] = 1;
        dofs[1] = 3;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            break;
        case 1:
            dofs[0] = 2;
            dofs[1] = 3;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 2;
            break;
        case 3:
            dofs[0] = 1;
            dofs[1] = 3;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new velocityupdate_dofmap_2();
  }

};


class velocityupdate_dofmap_3: public ufc::dofmap
{
public:

  velocityupdate_dofmap_3() : ufc::dofmap()
  {
    // Do nothing
  }

  ~velocityupdate_dofmap_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Q', quadrilateral, 1), dim=2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, false, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 2 * num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 8;
  }

  std::size_t num_element_dofs() const final override
  {
    return 8;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 4;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 0, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 4, 8 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + entity_indices[0][0];
    dofs[5] = offset + entity_indices[0][1];
    dofs[6] = offset + entity_indices[0][2];
    dofs[7] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 4;
        dofs[3] = 5;
        break;
    case 1:
        dofs[0] = 2;
        dofs[1] = 3;
        dofs[2] = 6;
        dofs[3] = 7;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 6;
        break;
    case 3:
        dofs[0] = 1;
        dofs[1] = 3;
        dofs[2] = 5;
        dofs[3] = 7;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 4;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 5;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 6;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 7;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 4;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 5;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 6;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 7;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 4;
            dofs[3] = 5;
            break;
        case 1:
            dofs[0] = 2;
            dofs[1] = 3;
            dofs[2] = 6;
            dofs[3] = 7;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 6;
            break;
        case 3:
            dofs[0] = 1;
            dofs[1] = 3;
            dofs[2] = 5;
            dofs[3] = 7;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 2;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new velocityupdate_dofmap_2();
    case 1:
        return new velocityupdate_dofmap_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new velocityupdate_dofmap_3();
  }

};


class velocityupdate_dofmap_4: public ufc::dofmap
{
public:

  velocityupdate_dofmap_4() : ufc::dofmap()
  {
    // Do nothing
  }

  ~velocityupdate_dofmap_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Real', quadrilateral, 0)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = {};
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 1;
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 1;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_dofs() const final override
  {
    return 1;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 1 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 1 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = 0;
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    // Do nothing
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new velocityupdate_dofmap_4();
  }

};


class velocityupdate_coordinate_mapping_3: public ufc::coordinate_mapping
{
public:

  velocityupdate_coordinate_mapping_3() : ufc::coordinate_mapping()
  {
    // Do nothing
  }

  ~velocityupdate_coordinate_mapping_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC coordinate_mapping from VectorElement(FiniteElement('Q', quadrilateral, 1), dim=2)";
  }

  ufc::coordinate_mapping * create() const final override
  {
    return new velocityupdate_coordinate_mapping_3();
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::quadrilateral;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new velocityupdate_finite_element_3();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new velocityupdate_dofmap_3();
  }

  void compute_physical_coordinates(
      double * x, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    velocityupdate_finite_element_2 xelement;
    double phi[4];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis values of coordinate element
        xelement.evaluate_reference_basis(phi, 1, &X[2 * ip]);
        // Compute x
        for (std::size_t i = 0; i < 2; ++i)
            for (std::size_t d = 0; d < 4; ++d)
                x[2 * ip + i] += coordinate_dofs[2 * d + i] * phi[d];
    }
  }

  void compute_reference_coordinates(
      double * X, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[4] = { 1.0, 0.0, 0.0, 0.0 };
    const double dphi_X0[2][4] =
        { { -1.0, 0.0, 1.0, 0.0 },
          { -1.0, 1.0, 0.0, 0.0 } };
    double J[4];
    double detJ[1];
    double K[4];
    double x0[2] = {};
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t k = 0; k < 4; ++k)
            x0[i] += coordinate_dofs[2 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 2; ++i)
    {
        for (std::size_t j = 0; j < 2; ++j)
        {
            J[2 * i + j] = 0.0;
            for (std::size_t k = 0; k < 4; ++k)
                J[2 * i + j] += coordinate_dofs[2 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t i = 0; i < 2; ++i)
                X[2 * ip + j] += K[2 * j + i] * (x[2 * ip + i] - x0[i]);
  }

  void compute_reference_geometry(
      double * X, double * J, double * detJ, double * K, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[4] = { 1.0, 0.0, 0.0, 0.0 };
    const double dphi_X0[2][4] =
        { { -1.0, 0.0, 1.0, 0.0 },
          { -1.0, 1.0, 0.0, 0.0 } };
    double x0[2] = {};
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t k = 0; k < 4; ++k)
            x0[i] += coordinate_dofs[2 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 2; ++i)
    {
        for (std::size_t j = 0; j < 2; ++j)
        {
            J[2 * i + j] = 0.0;
            for (std::size_t k = 0; k < 4; ++k)
                J[2 * i + j] += coordinate_dofs[2 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t i = 0; i < 2; ++i)
                X[2 * ip + j] += K[2 * j + i] * (x[2 * ip + i] - x0[i]);
  }

  void compute_jacobians(
      double * J, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    velocityupdate_finite_element_2 xelement;
    double dphi[8];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis derivatives of coordinate element
        xelement.evaluate_reference_basis_derivatives(dphi, 1, 1, &X[2 * ip]);
        // Compute J
        for (std::size_t i = 0; i < 2; ++i)
            for (std::size_t j = 0; j < 2; ++j)
                for (std::size_t d = 0; d < 4; ++d)
                    J[2 * 2 * ip + 2 * i + j] += coordinate_dofs[2 * d + i] * dphi[2 * d + j];
    }
  }

  void compute_jacobian_determinants(
      double * detJ, std::size_t num_points,
      const double * J,
      int cell_orientation) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
        detJ[ip] = J[2 * 2 * ip] * J[2 * 2 * ip + 2 + 1] - J[2 * 2 * ip + 1] * J[2 * 2 * ip + 2];
  }

  void compute_jacobian_inverses(
      double * K, std::size_t num_points,
      const double * J, const double * detJ) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        K[2 * 2 * ip] = J[2 * 2 * ip + 2 + 1] / detJ[ip];
        K[2 * 2 * ip + 1] = -J[2 * 2 * ip + 1] / detJ[ip];
        K[2 * 2 * ip + 2] = -J[2 * 2 * ip + 2] / detJ[ip];
        K[2 * 2 * ip + 2 + 1] = J[2 * 2 * ip] / detJ[ip];
    }
  }

  void compute_geometry(
      double * x, double * J, double * detJ, double * K, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    compute_physical_coordinates(x, num_points, X, coordinate_dofs);
    compute_jacobians(J, num_points, X, coordinate_dofs);
    compute_jacobian_determinants(detJ, num_points, J, cell_orientation);
    compute_jacobian_inverses(K, num_points, J, detJ);
  }

  void compute_midpoint_geometry(
      double * x, double * J,
      const double * coordinate_dofs) const final override
  {
    const double phi_Xm[4] = { 0.25, 0.25, 0.25, 0.25 };
    const double dphi_Xm[2][4] =
        { { -0.5, -0.5, 0.5, 0.5 },
          { -0.5, 0.5, -0.5, 0.5 } };
    // Compute x
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t d = 0; d < 4; ++d)
            x[i] += coordinate_dofs[2 * d + i] * phi_Xm[d];
    // Compute J
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t d = 0; d < 4; ++d)
                J[2 * i + j] += coordinate_dofs[2 * d + i] * dphi_Xm[j][d];
  }

};


class velocityupdate_cell_integral_0_otherwise: public ufc::cell_integral
{
public:

  velocityupdate_cell_integral_0_otherwise() : ufc::cell_integral()
  {

  }

  ~velocityupdate_cell_integral_0_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 6
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights16[16] = { 0.03025074832140047, 0.05671296296296294, 0.05671296296296294, 0.03025074832140047, 0.05671296296296294, 0.1063233257526736, 0.1063233257526736, 0.05671296296296294, 0.05671296296296294, 0.1063233257526736, 0.1063233257526736, 0.05671296296296294, 0.03025074832140047, 0.05671296296296294, 0.05671296296296294, 0.03025074832140047 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE3_C0_Q16[1][16][9] =
        { { { 0.642155458786954, -0.04791270525520749, 0.2071032758381843, -0.04791270525520749, 0.003574877848440125, -0.01545245481735435, 0.2071032758381843, -0.01545245481735435, 0.06679343183336095 },
            { 0.1825338654901248, -0.08990859384764512, 0.708720757727451, -0.01361927423749204, 0.006708288309297945, -0.05287929629592762, 0.05886948553831924, -0.02899666125555703, 0.2285714285714286 },
            { -0.08990859384764512, 0.1825338654901248, 0.708720757727451, 0.006708288309297945, -0.01361927423749204, -0.05287929629592762, -0.02899666125555703, 0.05886948553831924, 0.2285714285714286 },
            { -0.04791270525520755, 0.6421554587869539, 0.2071032758381844, 0.003574877848440129, -0.04791270525520749, -0.01545245481735435, -0.01545245481735436, 0.2071032758381842, 0.06679343183336098 },
            { 0.1825338654901248, -0.01361927423749204, 0.05886948553831924, -0.08990859384764512, 0.006708288309297945, -0.02899666125555703, 0.708720757727451, -0.05287929629592762, 0.2285714285714286 },
            { 0.05188558563950634, -0.02555668249989457, 0.2014551736513403, -0.02555668249989457, 0.01258815935775244, -0.09922844365176206, 0.2014551736513403, -0.09922844365176206, 0.7821861600033738 },
            { -0.02555668249989457, 0.05188558563950634, 0.2014551736513403, 0.01258815935775244, -0.02555668249989457, -0.09922844365176206, -0.09922844365176206, 0.2014551736513403, 0.7821861600033738 },
            { -0.01361927423749205, 0.1825338654901248, 0.05886948553831927, 0.006708288309297952, -0.0899085938476451, -0.02899666125555705, -0.05287929629592768, 0.7087207577274509, 0.2285714285714288 },
            { -0.08990859384764512, 0.006708288309297945, -0.02899666125555703, 0.1825338654901248, -0.01361927423749204, 0.05886948553831924, 0.708720757727451, -0.05287929629592762, 0.2285714285714286 },
            { -0.02555668249989457, 0.01258815935775244, -0.09922844365176206, 0.05188558563950634, -0.02555668249989457, 0.2014551736513403, 0.2014551736513403, -0.09922844365176206, 0.7821861600033738 },
            { 0.01258815935775244, -0.02555668249989457, -0.09922844365176206, -0.02555668249989457, 0.05188558563950634, 0.2014551736513403, -0.09922844365176206, 0.2014551736513403, 0.7821861600033738 },
            { 0.006708288309297952, -0.0899085938476451, -0.02899666125555705, -0.01361927423749205, 0.1825338654901248, 0.05886948553831927, -0.05287929629592768, 0.7087207577274509, 0.2285714285714288 },
            { -0.04791270525520755, 0.003574877848440129, -0.01545245481735436, 0.6421554587869539, -0.04791270525520749, 0.2071032758381842, 0.2071032758381844, -0.01545245481735435, 0.06679343183336098 },
            { -0.01361927423749205, 0.006708288309297952, -0.05287929629592768, 0.1825338654901248, -0.0899085938476451, 0.7087207577274509, 0.05886948553831927, -0.02899666125555705, 0.2285714285714288 },
            { 0.006708288309297952, -0.01361927423749205, -0.05287929629592768, -0.0899085938476451, 0.1825338654901248, 0.7087207577274509, -0.02899666125555705, 0.05886948553831927, 0.2285714285714288 },
            { 0.003574877848440133, -0.04791270525520754, -0.01545245481735437, -0.04791270525520754, 0.6421554587869539, 0.2071032758381843, -0.01545245481735437, 0.2071032758381843, 0.06679343183336101 } } };
    alignas(32) static const double FE8_C0_D01_Q16[1][16][4] =
        { { { -0.9305681557970262, 0.9305681557970262, -0.06943184420297371, 0.06943184420297371 },
            { -0.9305681557970262, 0.9305681557970262, -0.06943184420297371, 0.06943184420297371 },
            { -0.9305681557970262, 0.9305681557970262, -0.06943184420297371, 0.06943184420297371 },
            { -0.9305681557970262, 0.9305681557970262, -0.06943184420297371, 0.06943184420297371 },
            { -0.6699905217924281, 0.6699905217924281, -0.3300094782075719, 0.3300094782075719 },
            { -0.6699905217924281, 0.6699905217924281, -0.3300094782075719, 0.3300094782075719 },
            { -0.6699905217924281, 0.6699905217924281, -0.3300094782075719, 0.3300094782075719 },
            { -0.6699905217924281, 0.6699905217924281, -0.3300094782075719, 0.3300094782075719 },
            { -0.3300094782075719, 0.3300094782075719, -0.6699905217924281, 0.6699905217924281 },
            { -0.3300094782075719, 0.3300094782075719, -0.6699905217924281, 0.6699905217924281 },
            { -0.3300094782075719, 0.3300094782075719, -0.6699905217924281, 0.6699905217924281 },
            { -0.3300094782075719, 0.3300094782075719, -0.6699905217924281, 0.6699905217924281 },
            { -0.06943184420297371, 0.06943184420297371, -0.9305681557970262, 0.9305681557970262 },
            { -0.06943184420297371, 0.06943184420297371, -0.9305681557970262, 0.9305681557970262 },
            { -0.06943184420297371, 0.06943184420297371, -0.9305681557970262, 0.9305681557970262 },
            { -0.06943184420297371, 0.06943184420297371, -0.9305681557970262, 0.9305681557970262 } } };
    alignas(32) static const double FE8_C0_D10_Q16[1][16][4] =
        { { { -0.9305681557970262, -0.06943184420297371, 0.9305681557970262, 0.06943184420297371 },
            { -0.6699905217924281, -0.3300094782075719, 0.6699905217924281, 0.3300094782075719 },
            { -0.3300094782075719, -0.6699905217924281, 0.3300094782075719, 0.6699905217924281 },
            { -0.06943184420297371, -0.9305681557970262, 0.06943184420297371, 0.9305681557970262 },
            { -0.9305681557970262, -0.06943184420297371, 0.9305681557970262, 0.06943184420297371 },
            { -0.6699905217924281, -0.3300094782075719, 0.6699905217924281, 0.3300094782075719 },
            { -0.3300094782075719, -0.6699905217924281, 0.3300094782075719, 0.6699905217924281 },
            { -0.06943184420297371, -0.9305681557970262, 0.06943184420297371, 0.9305681557970262 },
            { -0.9305681557970262, -0.06943184420297371, 0.9305681557970262, 0.06943184420297371 },
            { -0.6699905217924281, -0.3300094782075719, 0.6699905217924281, 0.3300094782075719 },
            { -0.3300094782075719, -0.6699905217924281, 0.3300094782075719, 0.6699905217924281 },
            { -0.06943184420297371, -0.9305681557970262, 0.06943184420297371, 0.9305681557970262 },
            { -0.9305681557970262, -0.06943184420297371, 0.9305681557970262, 0.06943184420297371 },
            { -0.6699905217924281, -0.3300094782075719, 0.6699905217924281, 0.3300094782075719 },
            { -0.3300094782075719, -0.6699905217924281, 0.3300094782075719, 0.6699905217924281 },
            { -0.06943184420297371, -0.9305681557970262, 0.06943184420297371, 0.9305681557970262 } } };
    alignas(32) double BF0[9][9] = {};
    for (int iq = 0; iq < 16; ++iq)
    {
        // Quadrature loop body setup (num_points=16)
        // Unstructured varying computations for num_points=16
        const double J_c0 = coordinate_dofs[0] * FE8_C0_D10_Q16[0][iq][0] + coordinate_dofs[2] * FE8_C0_D10_Q16[0][iq][1] + coordinate_dofs[4] * FE8_C0_D10_Q16[0][iq][2] + coordinate_dofs[6] * FE8_C0_D10_Q16[0][iq][3];
        const double J_c3 = coordinate_dofs[1] * FE8_C0_D01_Q16[0][iq][0] + coordinate_dofs[3] * FE8_C0_D01_Q16[0][iq][1] + coordinate_dofs[5] * FE8_C0_D01_Q16[0][iq][2] + coordinate_dofs[7] * FE8_C0_D01_Q16[0][iq][3];
        const double J_c1 = coordinate_dofs[0] * FE8_C0_D01_Q16[0][iq][0] + coordinate_dofs[2] * FE8_C0_D01_Q16[0][iq][1] + coordinate_dofs[4] * FE8_C0_D01_Q16[0][iq][2] + coordinate_dofs[6] * FE8_C0_D01_Q16[0][iq][3];
        const double J_c2 = coordinate_dofs[1] * FE8_C0_D10_Q16[0][iq][0] + coordinate_dofs[3] * FE8_C0_D10_Q16[0][iq][1] + coordinate_dofs[5] * FE8_C0_D10_Q16[0][iq][2] + coordinate_dofs[7] * FE8_C0_D10_Q16[0][iq][3];
        alignas(32) double sv16[4];
        sv16[0] = J_c0 * J_c3;
        sv16[1] = J_c1 * J_c2;
        sv16[2] = sv16[0] + -1 * sv16[1];
        sv16[3] = std::abs(sv16[2]);
        const double fw0 = sv16[3] * weights16[iq];
        alignas(32) double TF0[9];
        for (int i = 0; i < 9; ++i)
            TF0[i] = fw0 * FE3_C0_Q16[0][iq][i];
        for (int i = 0; i < 9; ++i)
            for (int j = 0; j < 9; ++j)
                BF0[i][j] += TF0[i] * FE3_C0_Q16[0][iq][j];
    }
    std::fill(A, A + 324, 0.0);
    for (int i = 0; i < 9; ++i)
        for (int j = 0; j < 9; ++j)
            A[18 * i + j] += BF0[i][j];
    for (int i = 0; i < 9; ++i)
        for (int j = 0; j < 9; ++j)
            A[18 * (i + 9) + (j + 9)] += BF0[i][j];
  }

};


class velocityupdate_cell_integral_1_otherwise: public ufc::cell_integral
{
public:

  velocityupdate_cell_integral_1_otherwise() : ufc::cell_integral()
  {

  }

  ~velocityupdate_cell_integral_1_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 6
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights16[16] = { 0.03025074832140047, 0.05671296296296294, 0.05671296296296294, 0.03025074832140047, 0.05671296296296294, 0.1063233257526736, 0.1063233257526736, 0.05671296296296294, 0.05671296296296294, 0.1063233257526736, 0.1063233257526736, 0.05671296296296294, 0.03025074832140047, 0.05671296296296294, 0.05671296296296294, 0.03025074832140047 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE3_C0_Q16[1][16][9] =
        { { { 0.642155458786954, -0.04791270525520749, 0.2071032758381843, -0.04791270525520749, 0.003574877848440125, -0.01545245481735435, 0.2071032758381843, -0.01545245481735435, 0.06679343183336095 },
            { 0.1825338654901248, -0.08990859384764512, 0.708720757727451, -0.01361927423749204, 0.006708288309297945, -0.05287929629592762, 0.05886948553831924, -0.02899666125555703, 0.2285714285714286 },
            { -0.08990859384764512, 0.1825338654901248, 0.708720757727451, 0.006708288309297945, -0.01361927423749204, -0.05287929629592762, -0.02899666125555703, 0.05886948553831924, 0.2285714285714286 },
            { -0.04791270525520755, 0.6421554587869539, 0.2071032758381844, 0.003574877848440129, -0.04791270525520749, -0.01545245481735435, -0.01545245481735436, 0.2071032758381842, 0.06679343183336098 },
            { 0.1825338654901248, -0.01361927423749204, 0.05886948553831924, -0.08990859384764512, 0.006708288309297945, -0.02899666125555703, 0.708720757727451, -0.05287929629592762, 0.2285714285714286 },
            { 0.05188558563950634, -0.02555668249989457, 0.2014551736513403, -0.02555668249989457, 0.01258815935775244, -0.09922844365176206, 0.2014551736513403, -0.09922844365176206, 0.7821861600033738 },
            { -0.02555668249989457, 0.05188558563950634, 0.2014551736513403, 0.01258815935775244, -0.02555668249989457, -0.09922844365176206, -0.09922844365176206, 0.2014551736513403, 0.7821861600033738 },
            { -0.01361927423749205, 0.1825338654901248, 0.05886948553831927, 0.006708288309297952, -0.0899085938476451, -0.02899666125555705, -0.05287929629592768, 0.7087207577274509, 0.2285714285714288 },
            { -0.08990859384764512, 0.006708288309297945, -0.02899666125555703, 0.1825338654901248, -0.01361927423749204, 0.05886948553831924, 0.708720757727451, -0.05287929629592762, 0.2285714285714286 },
            { -0.02555668249989457, 0.01258815935775244, -0.09922844365176206, 0.05188558563950634, -0.02555668249989457, 0.2014551736513403, 0.2014551736513403, -0.09922844365176206, 0.7821861600033738 },
            { 0.01258815935775244, -0.02555668249989457, -0.09922844365176206, -0.02555668249989457, 0.05188558563950634, 0.2014551736513403, -0.09922844365176206, 0.2014551736513403, 0.7821861600033738 },
            { 0.006708288309297952, -0.0899085938476451, -0.02899666125555705, -0.01361927423749205, 0.1825338654901248, 0.05886948553831927, -0.05287929629592768, 0.7087207577274509, 0.2285714285714288 },
            { -0.04791270525520755, 0.003574877848440129, -0.01545245481735436, 0.6421554587869539, -0.04791270525520749, 0.2071032758381842, 0.2071032758381844, -0.01545245481735435, 0.06679343183336098 },
            { -0.01361927423749205, 0.006708288309297952, -0.05287929629592768, 0.1825338654901248, -0.0899085938476451, 0.7087207577274509, 0.05886948553831927, -0.02899666125555705, 0.2285714285714288 },
            { 0.006708288309297952, -0.01361927423749205, -0.05287929629592768, -0.0899085938476451, 0.1825338654901248, 0.7087207577274509, -0.02899666125555705, 0.05886948553831927, 0.2285714285714288 },
            { 0.003574877848440133, -0.04791270525520754, -0.01545245481735437, -0.04791270525520754, 0.6421554587869539, 0.2071032758381843, -0.01545245481735437, 0.2071032758381843, 0.06679343183336101 } } };
    alignas(32) static const double FE8_C0_D01_Q16[1][16][4] =
        { { { -0.9305681557970262, 0.9305681557970262, -0.06943184420297371, 0.06943184420297371 },
            { -0.9305681557970262, 0.9305681557970262, -0.06943184420297371, 0.06943184420297371 },
            { -0.9305681557970262, 0.9305681557970262, -0.06943184420297371, 0.06943184420297371 },
            { -0.9305681557970262, 0.9305681557970262, -0.06943184420297371, 0.06943184420297371 },
            { -0.6699905217924281, 0.6699905217924281, -0.3300094782075719, 0.3300094782075719 },
            { -0.6699905217924281, 0.6699905217924281, -0.3300094782075719, 0.3300094782075719 },
            { -0.6699905217924281, 0.6699905217924281, -0.3300094782075719, 0.3300094782075719 },
            { -0.6699905217924281, 0.6699905217924281, -0.3300094782075719, 0.3300094782075719 },
            { -0.3300094782075719, 0.3300094782075719, -0.6699905217924281, 0.6699905217924281 },
            { -0.3300094782075719, 0.3300094782075719, -0.6699905217924281, 0.6699905217924281 },
            { -0.3300094782075719, 0.3300094782075719, -0.6699905217924281, 0.6699905217924281 },
            { -0.3300094782075719, 0.3300094782075719, -0.6699905217924281, 0.6699905217924281 },
            { -0.06943184420297371, 0.06943184420297371, -0.9305681557970262, 0.9305681557970262 },
            { -0.06943184420297371, 0.06943184420297371, -0.9305681557970262, 0.9305681557970262 },
            { -0.06943184420297371, 0.06943184420297371, -0.9305681557970262, 0.9305681557970262 },
            { -0.06943184420297371, 0.06943184420297371, -0.9305681557970262, 0.9305681557970262 } } };
    alignas(32) static const double FE8_C0_D10_Q16[1][16][4] =
        { { { -0.9305681557970262, -0.06943184420297371, 0.9305681557970262, 0.06943184420297371 },
            { -0.6699905217924281, -0.3300094782075719, 0.6699905217924281, 0.3300094782075719 },
            { -0.3300094782075719, -0.6699905217924281, 0.3300094782075719, 0.6699905217924281 },
            { -0.06943184420297371, -0.9305681557970262, 0.06943184420297371, 0.9305681557970262 },
            { -0.9305681557970262, -0.06943184420297371, 0.9305681557970262, 0.06943184420297371 },
            { -0.6699905217924281, -0.3300094782075719, 0.6699905217924281, 0.3300094782075719 },
            { -0.3300094782075719, -0.6699905217924281, 0.3300094782075719, 0.6699905217924281 },
            { -0.06943184420297371, -0.9305681557970262, 0.06943184420297371, 0.9305681557970262 },
            { -0.9305681557970262, -0.06943184420297371, 0.9305681557970262, 0.06943184420297371 },
            { -0.6699905217924281, -0.3300094782075719, 0.6699905217924281, 0.3300094782075719 },
            { -0.3300094782075719, -0.6699905217924281, 0.3300094782075719, 0.6699905217924281 },
            { -0.06943184420297371, -0.9305681557970262, 0.06943184420297371, 0.9305681557970262 },
            { -0.9305681557970262, -0.06943184420297371, 0.9305681557970262, 0.06943184420297371 },
            { -0.6699905217924281, -0.3300094782075719, 0.6699905217924281, 0.3300094782075719 },
            { -0.3300094782075719, -0.6699905217924281, 0.3300094782075719, 0.6699905217924281 },
            { -0.06943184420297371, -0.9305681557970262, 0.06943184420297371, 0.9305681557970262 } } };
    alignas(32) double BF0[9] = {};
    alignas(32) double BF1[9] = {};
    for (int iq = 0; iq < 16; ++iq)
    {
        // Quadrature loop body setup (num_points=16)
        // Unstructured varying computations for num_points=16
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 9; ++ic)
            w1_c0 += w[1][ic] * FE3_C0_Q16[0][iq][ic];
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 9; ++ic)
            w1_c1 += w[1][ic + 9] * FE3_C0_Q16[0][iq][ic];
        double w2_d1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w2_d1 += w[2][ic] * FE8_C0_D01_Q16[0][iq][ic];
        const double J_c0 = coordinate_dofs[0] * FE8_C0_D10_Q16[0][iq][0] + coordinate_dofs[2] * FE8_C0_D10_Q16[0][iq][1] + coordinate_dofs[4] * FE8_C0_D10_Q16[0][iq][2] + coordinate_dofs[6] * FE8_C0_D10_Q16[0][iq][3];
        const double J_c3 = coordinate_dofs[1] * FE8_C0_D01_Q16[0][iq][0] + coordinate_dofs[3] * FE8_C0_D01_Q16[0][iq][1] + coordinate_dofs[5] * FE8_C0_D01_Q16[0][iq][2] + coordinate_dofs[7] * FE8_C0_D01_Q16[0][iq][3];
        const double J_c1 = coordinate_dofs[0] * FE8_C0_D01_Q16[0][iq][0] + coordinate_dofs[2] * FE8_C0_D01_Q16[0][iq][1] + coordinate_dofs[4] * FE8_C0_D01_Q16[0][iq][2] + coordinate_dofs[6] * FE8_C0_D01_Q16[0][iq][3];
        const double J_c2 = coordinate_dofs[1] * FE8_C0_D10_Q16[0][iq][0] + coordinate_dofs[3] * FE8_C0_D10_Q16[0][iq][1] + coordinate_dofs[5] * FE8_C0_D10_Q16[0][iq][2] + coordinate_dofs[7] * FE8_C0_D10_Q16[0][iq][3];
        double w2_d0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w2_d0 += w[2][ic] * FE8_C0_D10_Q16[0][iq][ic];
        alignas(32) double sv16[20];
        sv16[0] = J_c0 * J_c3;
        sv16[1] = J_c1 * J_c2;
        sv16[2] = sv16[0] + -1 * sv16[1];
        sv16[3] = J_c0 / sv16[2];
        sv16[4] = w2_d1 * sv16[3];
        sv16[5] = -1 * J_c1 / sv16[2];
        sv16[6] = w2_d0 * sv16[5];
        sv16[7] = sv16[4] + sv16[6];
        sv16[8] = J_c3 / sv16[2];
        sv16[9] = w2_d0 * sv16[8];
        sv16[10] = -1 * J_c2 / sv16[2];
        sv16[11] = w2_d1 * sv16[10];
        sv16[12] = sv16[9] + sv16[11];
        sv16[13] = sv16[12] * w[0][0];
        sv16[14] = sv16[7] * w[0][0];
        sv16[15] = w1_c0 + -1 * sv16[13];
        sv16[16] = w1_c1 + -1 * sv16[14];
        sv16[17] = std::abs(sv16[2]);
        sv16[18] = sv16[15] * sv16[17];
        sv16[19] = sv16[16] * sv16[17];
        const double fw0 = sv16[18] * weights16[iq];
        for (int i = 0; i < 9; ++i)
            BF0[i] += fw0 * FE3_C0_Q16[0][iq][i];
        const double fw1 = sv16[19] * weights16[iq];
        for (int i = 0; i < 9; ++i)
            BF1[i] += fw1 * FE3_C0_Q16[0][iq][i];
    }
    std::fill(A, A + 18, 0.0);
    for (int i = 0; i < 9; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 9; ++i)
        A[i + 9] += BF1[i];
  }

};


class velocityupdate_form_0: public ufc::form
{
public:

  velocityupdate_form_0() : ufc::form()
  {
    // Do nothing
  }

  ~velocityupdate_form_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "51f5d010d9f15fc2a9b53855011feff68fba130579d74e22744779533cb2a22f7c793d2240eabe45a771bff780fa9804b1c06df7b8d3c52ff1fd6f47673c8ed8";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 0;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    throw std::runtime_error("Invalid original coefficient index.");
    return i;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new velocityupdate_finite_element_3();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new velocityupdate_dofmap_3();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new velocityupdate_coordinate_mapping_3();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new velocityupdate_finite_element_1();
    case 1:
        return new velocityupdate_finite_element_1();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new velocityupdate_dofmap_1();
    case 1:
        return new velocityupdate_dofmap_1();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new velocityupdate_cell_integral_0_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class velocityupdate_form_1: public ufc::form
{
public:

  velocityupdate_form_1() : ufc::form()
  {
    // Do nothing
  }

  ~velocityupdate_form_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "95a11e2111f78e7d7778573ced4901425b842e9d6eb77ed2dc94c80c9272588aace4cd097cf4a7be2ce608f45c5d6098debf6b57bf0cb88d8031fe4f2d05a965";
  }

  std::size_t rank() const final override
  {
    return 1;
  }

  std::size_t num_coefficients() const final override
  {
    return 3;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 3)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new velocityupdate_finite_element_3();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new velocityupdate_dofmap_3();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new velocityupdate_coordinate_mapping_3();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new velocityupdate_finite_element_1();
    case 1:
        return new velocityupdate_finite_element_4();
    case 2:
        return new velocityupdate_finite_element_1();
    case 3:
        return new velocityupdate_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new velocityupdate_dofmap_1();
    case 1:
        return new velocityupdate_dofmap_4();
    case 2:
        return new velocityupdate_dofmap_1();
    case 3:
        return new velocityupdate_dofmap_2();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new velocityupdate_cell_integral_1_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/mesh/Mesh.h>
#include <dolfin/mesh/MultiMesh.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/fem/MultiMeshForm.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/MultiMeshFunctionSpace.h>
#include <dolfin/function/GenericFunction.h>
#include <dolfin/function/CoefficientAssigner.h>
#include <dolfin/function/MultiMeshCoefficientAssigner.h>
#include <dolfin/adaptivity/ErrorControl.h>
#include <dolfin/adaptivity/GoalFunctional.h>
#include <dolfin/la/GenericVector.h>

namespace VelocityUpdate
{

class CoefficientSpace_k: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_k(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<velocityupdate_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<velocityupdate_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_k(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<velocityupdate_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<velocityupdate_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_p1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_p1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<velocityupdate_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<velocityupdate_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_p1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<velocityupdate_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<velocityupdate_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_u1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_u1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<velocityupdate_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<velocityupdate_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_u1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<velocityupdate_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<velocityupdate_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_a_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<velocityupdate_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<velocityupdate_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_a_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<velocityupdate_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<velocityupdate_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_a_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<velocityupdate_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<velocityupdate_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_a_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<velocityupdate_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<velocityupdate_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_a_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_a_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_a_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_a_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_a_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_a: public dolfin::Form
{
public:

  // Constructor
  Form_a(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 0)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const velocityupdate_form_0>();
  }

  // Destructor
  ~Form_a()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return "unnamed";
  }

  // Typedefs
  typedef Form_a_FunctionSpace_0 TestSpace;
  typedef Form_a_FunctionSpace_1 TrialSpace;
  typedef Form_a_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_a_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;

  // Coefficients
};

class MultiMeshForm_a: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_a(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_a(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Destructor
  ~MultiMeshForm_a()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return "unnamed";
  }

  // Typedefs
  typedef Form_a_FunctionSpace_0 TestSpace;
  typedef Form_a_FunctionSpace_1 TrialSpace;
  typedef Form_a_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_a_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;

  // Coefficients
};

class Form_L_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_L_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<velocityupdate_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<velocityupdate_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_L_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<velocityupdate_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<velocityupdate_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_L_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_L_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_L_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_k Form_L_FunctionSpace_1;

typedef CoefficientSpace_u1 Form_L_FunctionSpace_2;

typedef CoefficientSpace_p1 Form_L_FunctionSpace_3;

class Form_L: public dolfin::Form
{
public:

  // Constructor
  Form_L(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 3), k(*this, 0), u1(*this, 1), p1(*this, 2)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const velocityupdate_form_1>();
  }

  // Constructor
  Form_L(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> k, std::shared_ptr<const dolfin::GenericFunction> u1, std::shared_ptr<const dolfin::GenericFunction> p1):
    dolfin::Form(1, 3), k(*this, 0), u1(*this, 1), p1(*this, 2)
  {
    _function_spaces[0] = V0;

    this->k = k;
    this->u1 = u1;
    this->p1 = p1;

    _ufc_form = std::make_shared<const velocityupdate_form_1>();
  }

  // Destructor
  ~Form_L()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "k")
      return 0;
    else if (name == "u1")
      return 1;
    else if (name == "p1")
      return 2;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "k";
    case 1:
      return "u1";
    case 2:
      return "p1";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_L_FunctionSpace_0 TestSpace;
  typedef Form_L_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_L_FunctionSpace_1 CoefficientSpace_k;
  typedef Form_L_FunctionSpace_2 CoefficientSpace_u1;
  typedef Form_L_FunctionSpace_3 CoefficientSpace_p1;

  // Coefficients
  dolfin::CoefficientAssigner k;
  dolfin::CoefficientAssigner u1;
  dolfin::CoefficientAssigner p1;
};

class MultiMeshForm_L: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_L(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V0), k(*this, 0), u1(*this, 1), p1(*this, 2)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_L(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_L(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> k, std::shared_ptr<const dolfin::GenericFunction> u1, std::shared_ptr<const dolfin::GenericFunction> p1):
    dolfin::MultiMeshForm(V0), k(*this, 0), u1(*this, 1), p1(*this, 2)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_L(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->k = k;
    this->u1 = u1;
    this->p1 = p1;

  }

  // Destructor
  ~MultiMeshForm_L()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "k")
      return 0;
    else if (name == "u1")
      return 1;
    else if (name == "p1")
      return 2;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "k";
    case 1:
      return "u1";
    case 2:
      return "p1";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_L_FunctionSpace_0 TestSpace;
  typedef Form_L_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_L_FunctionSpace_1 CoefficientSpace_k;
  typedef Form_L_FunctionSpace_2 CoefficientSpace_u1;
  typedef Form_L_FunctionSpace_3 CoefficientSpace_p1;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner k;
  dolfin::MultiMeshCoefficientAssigner u1;
  dolfin::MultiMeshCoefficientAssigner p1;
};

// Class typedefs
typedef Form_a BilinearForm;
typedef MultiMeshForm_a MultiMeshBilinearForm;
typedef Form_a JacobianForm;
typedef MultiMeshForm_a MultiMeshJacobianForm;
typedef Form_L LinearForm;
typedef MultiMeshForm_L MultiMeshLinearForm;
typedef Form_L ResidualForm;
typedef MultiMeshForm_L MultiMeshResidualForm;
typedef Form_a::TestSpace FunctionSpace;
typedef Form_a::MultiMeshTestSpace MultiMeshFunctionSpace;

}

#endif
